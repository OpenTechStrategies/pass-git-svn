#!/usr/bin/env python3

"""Take the git log and generate a changelog.  We assume the first
commit is 0.0.0.  Tags of the form v[0-9]+\.[0-9]+(\.[0-9]+)* give
major and minor release numbers.  We count up from the third number in
the version triplet, incrementing it once per commit.

The changelog can be generated from the git log and should never be
edited manually.

"""

import dateutil.parser
import os
import re
import subprocess
import sys

# Always want this in the re API, so now we have it.
def refind(pattern, string):
    """Find regex PATTERN in STRING.

If there's no match, return a tuple of (None,).

Otherwise, return a tuple where the first element is the entire match
and the rest are matches corresponding to parenthesized groups in
PATTERN.

    """
    m = re.search(pattern, string)
    if not m:
        return (None,)
    if not m.groups():
        return (m.group(0),)
    return m.groups()
re.find = refind

def slurp(fname):
    "FNAME is a string naming a file.  Read it, return contents"
    with open(fname) as INF:
        return INF.read()

# Get name of parent dir
prog = (os.path.basename(os.path.dirname(
    os.path.dirname(os.path.abspath(__file__)))))

# Snarf git log, falling back to just regurgitating the existing log.
# We do this in case the system doesn't have git or the source code
# was delivered with no .git dir
try:
    git_log = subprocess.check_output("git log --decorate",
                                  shell=True).decode('utf-8')
except:
    sys.exit(-1)

# Gather up version numbers
commits = re.split("\ncommit ", git_log)
versions = ["0.0.0"]
for commit in reversed(commits):
    line = commit.split("\n")[0]
    if line.startswith("commit "):
        line = line[7:]

    # Set tag to version number or None
    tag = re.find(r"tag: v([0-9]+\.[0-9]+)", line)[0]
    if tag:
        if len(tag.split('.')) == 2:
            tag += ".0"
        versions.append(tag)
    else:
        (major, minor, count) = versions[-1].split('.')
        versions.append("%s.%s.%s" % (major, minor, int(count)+1))

def get_changelog(commits, versions):
    ret = ""
    versions.reverse()
    for commit, version in zip(commits, versions):
        ret += "%s (%s-1) unstable; urgency=medium" % (prog, version)
        lines = commit.split("\n")
        commit = "\n".join(lines[3:])
        ret += commit
        author = lines[1].split(": ")[1]
        date = dateutil.parser.parse(lines[2].split(": ")[1])
        date = date.strftime("%a, %d %B %Y %H:%M:%S %z")
        ret += " -- %s  %s\n" % (author, date)
    return ret


if len(sys.argv) > 1 and sys.argv[1] == "--get-version":
    print(versions[-1])
else:
    changelog = get_changelog(commits, versions)
    print(changelog)
